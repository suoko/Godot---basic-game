import math

def read_obj(path):
    vertices = []
    faces = []
    with open(path, 'r') as f:
        for line in f:
            if line.startswith('v '):
                _, x, y, z = line.strip().split()
                vertices.append([float(x), float(y), float(z)])
            elif line.startswith('f '):
                parts = line.strip().split()[1:]
                face = [int(p.split('/')[0]) - 1 for p in parts]  # Only vertex indices
                faces.append(face)
    return vertices, faces

def write_obj(path, vertices, faces, normals=None):
    with open(path, 'w') as f:
        f.write('# Generated by extrusion script\n')
        for v in vertices:
            f.write(f'v {v[0]} {v[1]} {v[2]}\n')
        if normals:
            for n in normals:
                f.write(f'vn {n[0]} {n[1]} {n[2]}\n')
        mtllib = path.replace('.obj', '.mtl')
        f.write(f'mtllib {mtllib}\n')
        f.write('usemtl roof\n')
        for i, face in enumerate(faces):
            face_str = ' '.join([f'{v+1}//{i+1}' for v in face])
            f.write(f'f {face_str}\n')

def cross(a, b):
    return [
        a[1]*b[2] - a[2]*b[1],
        a[2]*b[0] - a[0]*b[2],
        a[0]*b[1] - a[1]*b[0]
    ]

def normalize(v):
    length = math.sqrt(sum(x*x for x in v))
    return [x / length for x in v]

def vec_add(a, b):
    return [a[i] + b[i] for i in range(len(a))]

def vec_sub(a, b):
    return [a[i] - b[i] for i in range(len(a))]

def compute_face_normal(v1, v2, v3):
    edge1 = vec_sub(v2, v1)
    edge2 = vec_sub(v3, v1)
    normal = cross(edge1, edge2)
    return normalize(normal)

def extrude_face(vertices, face_indices, height=3.0):
    # Get face points
    v0 = vertices[face_indices[0]]
    v1 = vertices[face_indices[1]]
    v2 = vertices[face_indices[2]]

    # Compute face normal
    normal = compute_face_normal(v0, v1, v2)

    # Scale normal by extrusion height
    extrusion_vector = [n * height for n in normal]

    # Extrude each vertex
    new_vertices = []
    for idx in face_indices:
        old_v = vertices[idx]
        new_v = vec_add(old_v, extrusion_vector)
        new_vertices.append(new_v)

    return new_vertices, normal

def extrude_mesh(vertices, faces, height=3.0):
    new_vertices = []
    new_faces = []
    normals = []

    for face in faces:
        # Compute extruded vertices
        extruded_verts, normal = extrude_face(vertices, face, height)
        start_idx = len(vertices) + len(new_vertices)

        # Add new vertices
        new_vertices.extend(extruded_verts)
        normals.append(normal)

        # Create side faces between original and extruded
        num_verts = len(face)
        for i in range(num_verts):
            v1 = face[i]
            v2 = face[(i+1) % num_verts]
            v3 = start_idx + (i+1) % num_verts
            v4 = start_idx + i
            new_faces.append([v1, v2, v3, v4])

        # Top face (extruded)
        new_faces.append(list(range(start_idx, start_idx + num_verts)))

    return new_vertices, new_faces, normals

# Main process
input_path = 'top_only.obj'
output_path = 'top_only_extruded_custom.obj'

vertices, faces = read_obj(input_path)
new_vertices, new_faces, normals = extrude_mesh(vertices, faces, height=8.0)

# Combine everything
final_vertices = vertices + new_vertices
final_faces = faces + new_faces

write_obj(output_path, final_vertices, final_faces, normals)
print(f"Saved extruded mesh to '{output_path}'")